def cubic_interpolation(x, y, x0):
    d = y[1]
    c = (y[2] - y[0]) / (x[2] - x[0])

    k1 = ((y[3] - y[1]) / (x[3] - x[1] - c)) / (x[2] - x[1])
    k2 = (y[2] - c * (x[2] - x[1]) - d) / ((x[2] - x[1]) ** 2)

    a = (k1 - 2 * k2) / (x[2] - x[1])
    b = k2 - a * (x[2] - x[1])

    # alpha2 = (x[2] - x[1]) ** 3
    # alpha3 = (x[3] - x[1]) ** 3
    # beta2 = (x[2] - x[1]) ** 2
    # beta3 = (x[3] - x[1]) ** 2

    # b = ((alpha3 * y[2] - alpha2 * y[3]) - c * (x[2] - x[3])) / (alpha3 * beta2 - alpha2 * beta3)

    # a = (y[2] - b * (x[2] - x[1]) ** 2 - c * (x[2] - x[1]) - d) / (x[2] - x[1]) ** 3

    return a * (x0 - x[1]) ** 3 + b * (x0 - x[1]) ** 2 + c * (x0 - x[1]) + d

    # k0 = ((y[0] - y[1]) * (x[1] - x[2]) - (y[1] - y[2]) * (x[0] - x[1])) / ((x[1] - x[2]) * (x[0] - x[1]))
    # k1 = ((x[0] ** 2 - x[0] * x[1] + x[1] ** 2) - (x[1] ** 2 - x[1] * x[2] + x[2] ** 2))
    # k2 = ((x[0] - x[1]) - (x[1] - x[2]))

    # n0 = ((y[2] - y[3]) * (x[3] - x[0]) - (y[3] - y[0]) * (x[2] - x[3])) / ((x[3] - x[0]) * (x[2] - x[3]))
    # n1 = ((x[2] ** 2 - x[2] * x[3] + x[3] ** 2) - (x[3] ** 2 - x[3] * x[0] + x[0] ** 2))
    # n2 = ((x[2] - x[3]) - (x[3] - x[0]))

    # a = (k0 * n2 - n0 * k2) / (k1 * n2 - n1 * k2)
    # b = (k0 - k1 * a) / k2

    # c = ((y[0] - y[1]) - a * (x[0] ** 3 - x[1] ** 3) - b * (x[0] ** 2 - x[1] ** 2)) / (x[0] - x[1])
    # d = y[0] - a * x[0] ** 3 - b * x[0] ** 2 - c * x[0]

    # return a * x0**3 + b * x0**2 + c * x0 + d
